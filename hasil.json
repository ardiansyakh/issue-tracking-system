'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/;q=0.8,application/signed-exchange;v=b3;q=0.9',
'Sec-Fetch-Site',
'same-origin',
'Sec-Fetch-Mode',
'navigate',
'Sec-Fetch-User',
'?1',
'Sec-Fetch-Dest',
'document',
'Referer',
'http: //localhost:3000/issues/issueUser/add',
'Accept-Encoding',
'gzip, deflate, br',
'Accept-Language',
'en-US,en;q=0.9,ar-AE;q=0.8,ar;q=0.7,id-ID;q=0.6,id;q=0.5'
],
trailers: {},
rawTrailers: [],
aborted: false,
upgrade: false,
url: '/issueUser/add',
method: 'POST',
statusCode: null,
statusMessage: null,
client: <ref *1> Socket {
connecting: false,
_hadError: false,
_parent: null,
_host: null,
_readableState: ReadableState {
  objectMode: false,
  highWaterMark: 16384,
  buffer: BufferList { head: null, tail: null, length: 0
    },
  length: 0,
  pipes: [],
  flowing: true,
  ended: false,
  endEmitted: false,
  reading: true,
  sync: false,
  needReadable: true,
  emittedReadable: false,
  readableListening: false,
  resumeScheduled: false,
  errorEmitted: false,
  emitClose: false,
  autoDestroy: false,
  destroyed: false,
  errored: null,
  closed: false,
  closeEmitted: false,
  defaultEncoding: 'utf8',
  awaitDrainWriters: null,
  multiAwaitDrain: false,
  readingMore: false,
  decoder: null,
  encoding: null,
    [Symbol(kPaused)
    ]: false
},
_events: [Object: null prototype
] {
  end: [Array
    ],
  timeout: [Function: socketOnTimeout
    ],
  data: [Function: bound socketOnData
    ],
  error: [Function: socketOnError
    ],
  close: [Array
    ],
  drain: [Function: bound socketOnDrain
    ],
  resume: [Function: onSocketResume
    ],
  pause: [Function: onSocketPause
    ]
},
_eventsCount: 8,
_maxListeners: undefined,
_writableState: WritableState {
  objectMode: false,
  highWaterMark: 16384,
  finalCalled: false,
  needDrain: false,
  ending: false,
  ended: false,
  finished: false,
  destroyed: false,
  decodeStrings: false,
  defaultEncoding: 'utf8',
  length: 0,
  writing: false,
  corked: 0,
  sync: true,
  bufferProcessing: false,
  onwrite: [Function: bound onwrite
    ],
  writecb: null,
  writelen: 0,
  afterWriteTickInfo: null,
  buffered: [],
  bufferedIndex: 0,
  allBuffers: true,
  allNoop: true,
  pendingcb: 0,
  prefinished: false,
  errorEmitted: false,
  emitClose: false,
  autoDestroy: false,
  errored: null,
  closed: false,
  closeEmitted: false
},
allowHalfOpen: true,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: Server {
  maxHeaderSize: undefined,
  insecureHTTPParser: undefined,
  _events: [Object: null prototype
    ],
  _eventsCount: 2,
  _maxListeners: undefined,
  _connections: 2,
  _handle: [TCP
    ],
  _usingWorkers: false,
  _workers: [],
  _unref: false,
  allowHalfOpen: true,
  pauseOnConnect: false,
  httpAllowHalfOpen: false,
  timeout: 0,
  keepAliveTimeout: 5000,
  maxHeadersCount: null,
  headersTimeout: 60000,
  requestTimeout: 0,
  _connectionKey: '6: : : : 3000',
    [Symbol(IncomingMessage)
    ]: [Function: IncomingMessage
    ],
    [Symbol(ServerResponse)
    ]: [Function: ServerResponse
    ],
    [Symbol(kCapture)
    ]: false,
    [Symbol(async_id_symbol)
    ]: 7
},
_server: Server {
  maxHeaderSize: undefined,
  insecureHTTPParser: undefined,
  _events: [Object: null prototype
    ],
  _eventsCount: 2,
  _maxListeners: undefined,
  _connections: 2,
  _handle: [TCP
    ],
  _usingWorkers: false,
  _workers: [],
  _unref: false,
  allowHalfOpen: true,
  pauseOnConnect: false,
  httpAllowHalfOpen: false,
  timeout: 0,
  keepAliveTimeout: 5000,
  maxHeadersCount: null,
  headersTimeout: 60000,
  requestTimeout: 0,
  _connectionKey: '6: : : : 3000',
    [Symbol(IncomingMessage)
    ]: [Function: IncomingMessage
    ],
    [Symbol(ServerResponse)
    ]: [Function: ServerResponse
    ],
    [Symbol(kCapture)
    ]: false,
    [Symbol(async_id_symbol)
    ]: 7
},
parser: HTTPParser {
  '0': [Function: bound setRequestTimeout
    ],
  '1': [Function: parserOnHeaders
    ],
  '2': [Function: parserOnHeadersComplete
    ],
  '3': [Function: parserOnBody
    ],
  '4': [Function: parserOnMessageComplete
    ],
  '5': [Function: bound onParserExecute
    ],
  '6': [Function: bound onParserTimeout
    ],
  _headers: [],
  _url: '',
  socket: [Circular *1
    ],
  incoming: [Circular *2
    ],
  outgoing: null,
  maxHeaderPairs: 2000,
  _consumed: true,
  onIncoming: [Function: bound parserOnIncoming
    ],
    [Symbol(resource_symbol)
    ]: [HTTPServerAsyncResource
    ]
},
on: [Function: socketListenerWrap
],
addListener: [Function: socketListenerWrap
],
prependListener: [Function: socketListenerWrap
],
_paused: false,
_httpMessage: ServerResponse {
  _events: [Object: null prototype
    ],
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  destroyed: false,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  _defaultKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: [Circular *1
    ],
  _header: null,
  _keepAliveTimeout: 5000,
  _onPendingData: [Function: bound updateOutgoingData
    ],
  _sent100: false,
  _expect_continue: false,
  req: [Circular *2
    ],
  locals: [Object: null prototype
    ] {},
    [Symbol(kCapture)
    ]: false,
    [Symbol(kNeedDrain)
    ]: false,
    [Symbol(corked)
    ]: 0,
    [Symbol(kOutHeaders)
    ]: [Object: null prototype
    ]
},
[Symbol(async_id_symbol)
]: 13,
[Symbol(kHandle)
]: TCP {
  reading: true,
  onconnection: null,
  _consumed: true,
    [Symbol(owner_symbol)
    ]: [Circular *1
    ]
},
[Symbol(kSetNoDelay)
]: false,
[Symbol(lastWriteQueueSize)
]: 0,
[Symbol(timeout)
]: null,
[Symbol(kBuffer)
]: null,
[Symbol(kBufferCb)
]: null,
[Symbol(kBufferGen)
]: null,
[Symbol(kCapture)
]: false,
[Symbol(kBytesRead)
]: 0,
[Symbol(kBytesWritten)
]: 0,
[Symbol(RequestTimeout)
]: undefined
},
_consuming: true,
_dumped: false,
next: [Function: next
],
baseUrl: '/issues',
originalUrl: '/issues/issueUser/add',
_parsedUrl: Url {
protocol: null,
slashes: null,
auth: null,
host: null,
port: null,
hostname: null,
hash: null,
search: null,
query: null,
pathname: '/issueUser/add',
path: '/issueUser/add',
href: '/issueUser/add',
_raw: '/issueUser/add'
},
params: {},
query: {},
res: <ref *3> ServerResponse {
_events: [Object: null prototype
] { finish: [Function: bound resOnFinish
    ]
},
_eventsCount: 1,
_maxListeners: undefined,
outputData: [],
outputSize: 0,
writable: true,
destroyed: false,
_last: false,
chunkedEncoding: false,
shouldKeepAlive: true,
_defaultKeepAlive: true,
useChunkedEncodingByDefault: true,
sendDate: true,
_removedConnection: false,
_removedContLen: false,
_removedTE: false,
_contentLength: null,
_hasBody: true,
_trailer: '',
finished: false,
_headerSent: false,
socket: <ref *1> Socket {
  connecting: false,
  _hadError: false,
  _parent: null,
  _host: null,
  _readableState: [ReadableState
    ],
  _events: [Object: null prototype
    ],
  _eventsCount: 8,
  _maxListeners: undefined,
  _writableState: [WritableState
    ],
  allowHalfOpen: true,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: [Server
    ],
  _server: [Server
    ],
  parser: [HTTPParser
    ],
  on: [Function: socketListenerWrap
    ],
  addListener: [Function: socketListenerWrap
    ],
  prependListener: [Function: socketListenerWrap
    ],
  _paused: false,
  _httpMessage: [Circular *3
    ],
    [Symbol(async_id_symbol)
    ]: 13,
    [Symbol(kHandle)
    ]: [TCP
    ],
    [Symbol(kSetNoDelay)
    ]: false,
    [Symbol(lastWriteQueueSize)
    ]: 0,
    [Symbol(timeout)
    ]: null,
    [Symbol(kBuffer)
    ]: null,
    [Symbol(kBufferCb)
    ]: null,
    [Symbol(kBufferGen)
    ]: null,
    [Symbol(kCapture)
    ]: false,
    [Symbol(kBytesRead)
    ]: 0,
    [Symbol(kBytesWritten)
    ]: 0,
    [Symbol(RequestTimeout)
    ]: undefined
},
_header: null,
_keepAliveTimeout: 5000,
_onPendingData: [Function: bound updateOutgoingData
],
_sent100: false,
_expect_continue: false,
req: [Circular *2
],
locals: [Object: null prototype
] {},
[Symbol(kCapture)
]: false,
[Symbol(kNeedDrain)
]: false,
[Symbol(corked)
]: 0,
[Symbol(kOutHeaders)
]: [Object: null prototype
] { 'x-powered-by': [Array
    ]
}
},
body: {
issue_user_client_name: 'Gulistiani Fuzuli',
issue_user_client_email: 'gulistianifuzuli@gmail.com',
issue_subject: 'coba upload',
issue_category: '5',
issue_desc: '   aaaa',
files: 'portfolio-3.jpg'
},
_body: true,
length: undefined,
route: Route {
path: '/issueUser/add',
stack: [
    [Layer
    ]
],
methods: { post: true
}
},
[Symbol(kCapture)
]: false,
[Symbol(RequestTimeout)
]: undefined
}
[nodemon
] restarting due to changes...
[nodemon
] starting `node index.js`
C:\Users\gulis\Dropbox\Personal\H\Phase1\final\issue-tracking-system\controllers\IssueController.js: 97
}
            ^

SyntaxError: missing ) after argument list
at wrapSafe (internal/modules/cjs/loader.js: 979: 16)
at Module._compile (internal/modules/cjs/loader.js: 1027: 27)
at Object.Module._extensions..js (internal/modules/cjs/loader.js: 1092: 10)
at Module.load (internal/modules/cjs/loader.js: 928: 32)
at Function.Module._load (internal/modules/cjs/loader.js: 769: 14)
at Module.require (internal/modules/cjs/loader.js: 952: 19)
at require (internal/modules/cjs/helpers.js: 88: 18)
at Object.<anonymous> (C:\Users\gulis\Dropbox\Personal\H\Phase1\final\issue-tracking-system\routers\issueRouter.js: 2: 25)
at Module._compile (internal/modules/cjs/loader.js: 1063: 30)
at Object.Module._extensions..js (internal/modules/cjs/loader.js: 1092: 10)
[nodemon
] app crashed - waiting for file changes before starting...
[nodemon
] restarting due to changes...
[nodemon
] starting `node index.js`
listening to port 3000 ...
[nodemon
] restarting due to changes...
[nodemon
] starting `node index.js`
listening to port 3000 ...
Executing (default): SELECT "id",
"category_name",
"category_initial",
"createdAt",
"updatedAt" FROM "categories" AS "category";
Executing (default): SELECT "id",
"category_name",
"category_initial",
"createdAt",
"updatedAt" FROM "categories" AS "category";
sampeeee
[nodemon
] restarting due to changes...
[nodemon
] starting `node index.js`
listening to port 3000 ...
[nodemon
] restarting due to changes...
[nodemon
] starting `node index.js`
listening to port 3000 ...
Executing (default): SELECT "id",
"category_name",
"category_initial",
"createdAt",
"updatedAt" FROM "categories" AS "category";
Executing (default): SELECT "id",
"category_name",
"category_initial",
"createdAt",
"updatedAt" FROM "categories" AS "category";
sampeeee
<ref *2> IncomingMessage {
_readableState: ReadableState {
objectMode: false,
highWaterMark: 16384,
buffer: BufferList { head: null, tail: null, length: 0
},
length: 0,
pipes: [],
flowing: true,
ended: true,
endEmitted: true,
reading: false,
sync: false,
needReadable: false,
emittedReadable: false,
readableListening: false,
resumeScheduled: false,
errorEmitted: false,
emitClose: true,
autoDestroy: false,
destroyed: false,
errored: null,
closed: false,
closeEmitted: false,
defaultEncoding: 'utf8',
awaitDrainWriters: null,
multiAwaitDrain: false,
readingMore: false,
decoder: null,
encoding: null,
[Symbol(kPaused)
]: false
},
_events: [Object: null prototype
] { end: [Function: clearRequestTimeout
]
},
_eventsCount: 1,
_maxListeners: undefined,
socket: <ref *1> Socket {
connecting: false,
_hadError: false,
_parent: null,
_host: null,
_readableState: ReadableState {
  objectMode: false,
  highWaterMark: 16384,
  buffer: BufferList { head: null, tail: null, length: 0
},
  length: 0,
  pipes: [],
  flowing: true,
  ended: false,
  endEmitted: false,
  reading: true,
  sync: false,
  needReadable: true,
  emittedReadable: false,
  readableListening: false,
  resumeScheduled: false,
  errorEmitted: false,
  emitClose: false,
  autoDestroy: false,
  destroyed: false,
  errored: null,
  closed: false,
  closeEmitted: false,
  defaultEncoding: 'utf8',
  awaitDrainWriters: null,
  multiAwaitDrain: false,
  readingMore: false,
  decoder: null,
  encoding: null,
[Symbol(kPaused)
]: false
},
_events: [Object: null prototype
] {
  end: [Array
],
  timeout: [Function: socketOnTimeout
],
  data: [Function: bound socketOnData
],
  error: [Function: socketOnError
],
  close: [Array
],
  drain: [Function: bound socketOnDrain
],
  resume: [Function: onSocketResume
],
  pause: [Function: onSocketPause
]
},
_eventsCount: 8,
_maxListeners: undefined,
_writableState: WritableState {
  objectMode: false,
  highWaterMark: 16384,
  finalCalled: false,
  needDrain: false,
  ending: false,
  ended: false,
  finished: false,
  destroyed: false,
  decodeStrings: false,
  defaultEncoding: 'utf8',
  length: 0,
  writing: false,
  corked: 0,
  sync: true,
  bufferProcessing: false,
  onwrite: [Function: bound onwrite
],
  writecb: null,
  writelen: 0,
  afterWriteTickInfo: null,
  buffered: [],
  bufferedIndex: 0,
  allBuffers: true,
  allNoop: true,
  pendingcb: 0,
  prefinished: false,
  errorEmitted: false,
  emitClose: false,
  autoDestroy: false,
  errored: null,
  closed: false,
  closeEmitted: false
},
allowHalfOpen: true,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: Server {
  maxHeaderSize: undefined,
  insecureHTTPParser: undefined,
  _events: [Object: null prototype
],
  _eventsCount: 2,
  _maxListeners: undefined,
  _connections: 2,
  _handle: [TCP
],
  _usingWorkers: false,
  _workers: [],
  _unref: false,
  allowHalfOpen: true,
  pauseOnConnect: false,
  httpAllowHalfOpen: false,
  timeout: 0,
  keepAliveTimeout: 5000,
  maxHeadersCount: null,
  headersTimeout: 60000,
  requestTimeout: 0,
  _connectionKey: '6: : : : 3000',
[Symbol(IncomingMessage)
]: [Function: IncomingMessage
],
[Symbol(ServerResponse)
]: [Function: ServerResponse
],
[Symbol(kCapture)
]: false,
[Symbol(async_id_symbol)
]: 7
},
_server: Server {
  maxHeaderSize: undefined,
  insecureHTTPParser: undefined,
  _events: [Object: null prototype
],
  _eventsCount: 2,
  _maxListeners: undefined,
  _connections: 2,
  _handle: [TCP
],
  _usingWorkers: false,
  _workers: [],
  _unref: false,
  allowHalfOpen: true,
  pauseOnConnect: false,
  httpAllowHalfOpen: false,
  timeout: 0,
  keepAliveTimeout: 5000,
  maxHeadersCount: null,
  headersTimeout: 60000,
  requestTimeout: 0,
  _connectionKey: '6: : : : 3000',
[Symbol(IncomingMessage)
]: [Function: IncomingMessage
],
[Symbol(ServerResponse)
]: [Function: ServerResponse
],
[Symbol(kCapture)
]: false,
[Symbol(async_id_symbol)
]: 7
},
parser: HTTPParser {
  '0': [Function: bound setRequestTimeout
],
  '1': [Function: parserOnHeaders
],
  '2': [Function: parserOnHeadersComplete
],
  '3': [Function: parserOnBody
],
  '4': [Function: parserOnMessageComplete
],
  '5': [Function: bound onParserExecute
],
  '6': [Function: bound onParserTimeout
],
  _headers: [],
  _url: '',
  socket: [Circular *1
],
  incoming: [Circular *2
],
  outgoing: null,
  maxHeaderPairs: 2000,
  _consumed: true,
  onIncoming: [Function: bound parserOnIncoming
],
[Symbol(resource_symbol)
]: [HTTPServerAsyncResource
]
},
on: [Function: socketListenerWrap
],
addListener: [Function: socketListenerWrap
],
prependListener: [Function: socketListenerWrap
],
_paused: false,
_httpMessage: ServerResponse {
  _events: [Object: null prototype
],
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  destroyed: false,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  _defaultKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: [Circular *1
],
  _header: null,
  _keepAliveTimeout: 5000,
  _onPendingData: [Function: bound updateOutgoingData
],
  _sent100: false,
  _expect_continue: false,
  req: [Circular *2
],
  locals: [Object: null prototype
] {},
[Symbol(kCapture)
]: false,
[Symbol(kNeedDrain)
]: false,
[Symbol(corked)
]: 0,
[Symbol(kOutHeaders)
]: [Object: null prototype
]
},
[Symbol(async_id_symbol)
]: 13,
[Symbol(kHandle)
]: TCP {
  reading: true,
  onconnection: null,
  _consumed: true,
[Symbol(owner_symbol)
]: [Circular *1
]
},
[Symbol(kSetNoDelay)
]: false,
[Symbol(lastWriteQueueSize)
]: 0,
[Symbol(timeout)
]: null,
[Symbol(kBuffer)
]: null,
[Symbol(kBufferCb)
]: null,
[Symbol(kBufferGen)
]: null,
[Symbol(kCapture)
]: false,
[Symbol(kBytesRead)
]: 0,
[Symbol(kBytesWritten)
]: 0,
[Symbol(RequestTimeout)
]: undefined
},
httpVersionMajor: 1,
httpVersionMinor: 1,
httpVersion: '1.1',
complete: true,
headers: {
host: 'localhost: 3000',
connection: 'keep-alive',
'content-length': '177',
'cache-control': 'max-age=0',
'sec-ch-ua': '" Not;A Brand";v="99",
"Google Chrome";v="91",
"Chromium";v="91"',
'sec-ch-ua-mobile': '?0',
origin: 'http: //localhost:3000',
'upgrade-insecure-requests': '1',
dnt: '1',
'content-type': 'application/x-www-form-urlencoded',
'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Safari/537.36',
accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,* /*;q=0.8,application/signed-exchange;v=b3;q=0.9',
'sec-fetch-site': 'same-origin',
'sec-fetch-mode': 'navigate',
'sec-fetch-user': '?1',
'sec-fetch-dest': 'document',
referer: 'http://localhost:3000/issues/issueUser/add',
'accept-encoding': 'gzip, deflate, br',
'accept-language': 'en-US,en;q=0.9,ar-AE;q=0.8,ar;q=0.7,id-ID;q=0.6,id;q=0.5'
},
rawHeaders: [
'Host',
'localhost:3000',
'Connection',
'keep-alive',
'Content-Length',
'177',
'Cache-Control',
'max-age=0',
'sec-ch-ua',
'" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',
'sec-ch-ua-mobile',
'?0',
'Origin',
'http://localhost:3000',
'Upgrade-Insecure-Requests',
'1',
'DNT',
'1',
'Content-Type',
'application/x-www-form-urlencoded',
'User-Agent',
'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Safari/537.36',
'Accept',
'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
'Sec-Fetch-Site',
'same-origin',
'Sec-Fetch-Mode',
'navigate',
'Sec-Fetch-User',
'?1',
'Sec-Fetch-Dest',
'document',
'Referer',
'http: //localhost:3000/issues/issueUser/add',
'Accept-Encoding',
'gzip, deflate, br',
'Accept-Language',
'en-US,en;q=0.9,ar-AE;q=0.8,ar;q=0.7,id-ID;q=0.6,id;q=0.5'
],
trailers: {},
rawTrailers: [],
aborted: false,
upgrade: false,
url: '/issueUser/add',
method: 'POST',
statusCode: null,
statusMessage: null,
client: <ref *1> Socket {
connecting: false,
_hadError: false,
_parent: null,
_host: null,
_readableState: ReadableState {
  objectMode: false,
  highWaterMark: 16384,
  buffer: BufferList { head: null, tail: null, length: 0
},
  length: 0,
  pipes: [],
  flowing: true,
  ended: false,
  endEmitted: false,
  reading: true,
  sync: false,
  needReadable: true,
  emittedReadable: false,
  readableListening: false,
  resumeScheduled: false,
  errorEmitted: false,
  emitClose: false,
  autoDestroy: false,
  destroyed: false,
  errored: null,
  closed: false,
  closeEmitted: false,
  defaultEncoding: 'utf8',
  awaitDrainWriters: null,
  multiAwaitDrain: false,
  readingMore: false,
  decoder: null,
  encoding: null,
[Symbol(kPaused)
]: false
},
_events: [Object: null prototype
] {
  end: [Array
],
  timeout: [Function: socketOnTimeout
],
  data: [Function: bound socketOnData
],
  error: [Function: socketOnError
],
  close: [Array
],
  drain: [Function: bound socketOnDrain
],
  resume: [Function: onSocketResume
],
  pause: [Function: onSocketPause
]
},
_eventsCount: 8,
_maxListeners: undefined,
_writableState: WritableState {
  objectMode: false,
  highWaterMark: 16384,
  finalCalled: false,
  needDrain: false,
  ending: false,
  ended: false,
  finished: false,
  destroyed: false,
  decodeStrings: false,
  defaultEncoding: 'utf8',
  length: 0,
  writing: false,
  corked: 0,
  sync: true,
  bufferProcessing: false,
  onwrite: [Function: bound onwrite
],
  writecb: null,
  writelen: 0,
  afterWriteTickInfo: null,
  buffered: [],
  bufferedIndex: 0,
  allBuffers: true,
  allNoop: true,
  pendingcb: 0,
  prefinished: false,
  errorEmitted: false,
  emitClose: false,
  autoDestroy: false,
  errored: null,
  closed: false,
  closeEmitted: false
},
allowHalfOpen: true,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: Server {
  maxHeaderSize: undefined,
  insecureHTTPParser: undefined,
  _events: [Object: null prototype
],
  _eventsCount: 2,
  _maxListeners: undefined,
  _connections: 2,
  _handle: [TCP
],
  _usingWorkers: false,
  _workers: [],
  _unref: false,
  allowHalfOpen: true,
  pauseOnConnect: false,
  httpAllowHalfOpen: false,
  timeout: 0,
  keepAliveTimeout: 5000,
  maxHeadersCount: null,
  headersTimeout: 60000,
  requestTimeout: 0,
  _connectionKey: '6: : : : 3000',
[Symbol(IncomingMessage)
]: [Function: IncomingMessage
],
[Symbol(ServerResponse)
]: [Function: ServerResponse
],
[Symbol(kCapture)
]: false,
[Symbol(async_id_symbol)
]: 7
},
_server: Server {
  maxHeaderSize: undefined,
  insecureHTTPParser: undefined,
  _events: [Object: null prototype
],
  _eventsCount: 2,
  _maxListeners: undefined,
  _connections: 2,
  _handle: [TCP
],
  _usingWorkers: false,
  _workers: [],
  _unref: false,
  allowHalfOpen: true,
  pauseOnConnect: false,
  httpAllowHalfOpen: false,
  timeout: 0,
  keepAliveTimeout: 5000,
  maxHeadersCount: null,
  headersTimeout: 60000,
  requestTimeout: 0,
  _connectionKey: '6: : : : 3000',
[Symbol(IncomingMessage)
]: [Function: IncomingMessage
],
[Symbol(ServerResponse)
]: [Function: ServerResponse
],
[Symbol(kCapture)
]: false,
[Symbol(async_id_symbol)
]: 7
},
parser: HTTPParser {
  '0': [Function: bound setRequestTimeout
],
  '1': [Function: parserOnHeaders
],
  '2': [Function: parserOnHeadersComplete
],
  '3': [Function: parserOnBody
],
  '4': [Function: parserOnMessageComplete
],
  '5': [Function: bound onParserExecute
],
  '6': [Function: bound onParserTimeout
],
  _headers: [],
  _url: '',
  socket: [Circular *1
],
  incoming: [Circular *2
],
  outgoing: null,
  maxHeaderPairs: 2000,
  _consumed: true,
  onIncoming: [Function: bound parserOnIncoming
],
[Symbol(resource_symbol)
]: [HTTPServerAsyncResource
]
},
on: [Function: socketListenerWrap
],
addListener: [Function: socketListenerWrap
],
prependListener: [Function: socketListenerWrap
],
_paused: false,
_httpMessage: ServerResponse {
  _events: [Object: null prototype
],
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  destroyed: false,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  _defaultKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: [Circular *1
],
  _header: null,
  _keepAliveTimeout: 5000,
  _onPendingData: [Function: bound updateOutgoingData
],
  _sent100: false,
  _expect_continue: false,
  req: [Circular *2
],
  locals: [Object: null prototype
] {},
[Symbol(kCapture)
]: false,
[Symbol(kNeedDrain)
]: false,
[Symbol(corked)
]: 0,
[Symbol(kOutHeaders)
]: [Object: null prototype
]
},
[Symbol(async_id_symbol)
]: 13,
[Symbol(kHandle)
]: TCP {
  reading: true,
  onconnection: null,
  _consumed: true,
[Symbol(owner_symbol)
]: [Circular *1
]
},
[Symbol(kSetNoDelay)
]: false,
[Symbol(lastWriteQueueSize)
]: 0,
[Symbol(timeout)
]: null,
[Symbol(kBuffer)
]: null,
[Symbol(kBufferCb)
]: null,
[Symbol(kBufferGen)
]: null,
[Symbol(kCapture)
]: false,
[Symbol(kBytesRead)
]: 0,
[Symbol(kBytesWritten)
]: 0,
[Symbol(RequestTimeout)
]: undefined
},
_consuming: true,
_dumped: false,
next: [Function: next
],
baseUrl: '/issues',
originalUrl: '/issues/issueUser/add',
_parsedUrl: Url {
protocol: null,
slashes: null,
auth: null,
host: null,
port: null,
hostname: null,
hash: null,
search: null,
query: null,
pathname: '/issueUser/add',
path: '/issueUser/add',
href: '/issueUser/add',
_raw: '/issueUser/add'
},
params: {},
query: {},
res: <ref *3> ServerResponse {
_events: [Object: null prototype
] { finish: [Function: bound resOnFinish
]
},
_eventsCount: 1,
_maxListeners: undefined,
outputData: [],
outputSize: 0,
writable: true,
destroyed: false,
_last: false,
chunkedEncoding: false,
shouldKeepAlive: true,
_defaultKeepAlive: true,
useChunkedEncodingByDefault: true,
sendDate: true,
_removedConnection: false,
_removedContLen: false,
_removedTE: false,
_contentLength: null,
_hasBody: true,
_trailer: '',
finished: false,
_headerSent: false,
socket: <ref *1> Socket {
  connecting: false,
  _hadError: false,
  _parent: null,
  _host: null,
  _readableState: [ReadableState
],
  _events: [Object: null prototype
],
  _eventsCount: 8,
  _maxListeners: undefined,
  _writableState: [WritableState
],
  allowHalfOpen: true,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: [Server
],
  _server: [Server
],
  parser: [HTTPParser
],
  on: [Function: socketListenerWrap
],
  addListener: [Function: socketListenerWrap
],
  prependListener: [Function: socketListenerWrap
],
  _paused: false,
  _httpMessage: [Circular *3
],
[Symbol(async_id_symbol)
]: 13,
[Symbol(kHandle)
]: [TCP
],
[Symbol(kSetNoDelay)
]: false,
[Symbol(lastWriteQueueSize)
]: 0,
[Symbol(timeout)
]: null,
[Symbol(kBuffer)
]: null,
[Symbol(kBufferCb)
]: null,
[Symbol(kBufferGen)
]: null,
[Symbol(kCapture)
]: false,
[Symbol(kBytesRead)
]: 0,
[Symbol(kBytesWritten)
]: 0,
[Symbol(RequestTimeout)
]: undefined
},
_header: null,
_keepAliveTimeout: 5000,
_onPendingData: [Function: bound updateOutgoingData
],
_sent100: false,
_expect_continue: false,
req: [Circular *2
],
locals: [Object: null prototype
] {},
[Symbol(kCapture)
]: false,
[Symbol(kNeedDrain)
]: false,
[Symbol(corked)
]: 0,
[Symbol(kOutHeaders)
]: [Object: null prototype
] { 'x-powered-by': [Array
]
}
},
body: {
issue_user_client_name: 'Gulistiani Fuzuli',
issue_user_client_email: 'gulistianifuzuli@gmail.com',
issue_subject: 'coba upload',
issue_category: '6',
issue_desc: '   qqqq',
files: 'portfolio-4.jpg'
},
_body: true,
length: undefined,
route: Route {
path: '/issueUser/add',
stack: [
[Layer
]
],
methods: { post: true
}
},
[Symbol(kCapture)
]: false,
[Symbol(RequestTimeout)
]: undefined
}